<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tyler Fisher</title>
    <atom:link href="http://www.tylerjfisher.com/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://www.tylerjfisher.com</link>
    <description>News Apps Developer</description>
    <pubDate>Tue, 04 Jun 2013 20:00:00 -0400</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>Lessons of Running My First News Apps Team</title>
      <link>http://www.tylerjfisher.com/articles/news_apps_team/</link>
      <pubDate>Tue, 04 Jun 2013 20:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://www.tylerjfisher.com/articles/news_apps_team/</guid>
      <author></author>
      <description>&lt;h6&gt;Note: This was originally published on &lt;a href=&quot;http://source.mozillaopennews.org/en-US/articles/lessons-running-my-first-news-apps-team/&quot; target=&quot;_blank&quot;&gt;Source&lt;/a&gt;.&lt;/h6&gt;
&lt;p&gt;Last week, I launched my first team-developed &lt;a href=&quot;http://www.northbynorthwestern.com/housing&quot;&gt;news app&lt;/a&gt; with a group of amazing student news nerds and peers: &lt;a href=&quot;http://www.twitter.com/hil_fung&quot;&gt;Hilary Fung&lt;/a&gt;, &lt;a href=&quot;http://www.twitter.com/danhillreports&quot;&gt;Dan Hill&lt;/a&gt;, &lt;a href=&quot;http://www.twitter.com/kkrebeccalai&quot;&gt;Rebecca Lai&lt;/a&gt;, &lt;a href=&quot;http://www.twitter.com/shenghis&quot;&gt;Sheng Wu&lt;/a&gt; and &lt;a href=&quot;http://www.twitter.com/ktzhu&quot;&gt;Katie Zhu&lt;/a&gt;. We developed &lt;a href=&quot;http://www.northbynorthwestern.com/housing&quot;&gt;a housing guide&lt;/a&gt; for incoming freshmen to Northwestern University who are in the process of applying for freshman housing. It includes an interactive map of campus, filters to narrow down housing options, photos and videos of each hall, quotes from current residents and basic statistics including number of students, room size, cost and distance to key campus locations.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.northbynorthwestern.com/housing&quot;&gt;&lt;img src=&quot;http://www.tylerjfisher.com/articles/news_apps_team/housing-home.png&quot; alt=&quot;The North by Northwestern Housing Guide&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The project, annually published by &lt;a href=&quot;http://www.northbynorthwestern.com/&quot;&gt;North by Northwestern&lt;/a&gt;, has existed in some form or another since 2008 and has been developed by rock stars like &lt;a href=&quot;http://www.twitter.com/giratikanon&quot;&gt;Tom Giratikanon&lt;/a&gt; (the site’s founder), &lt;a href=&quot;http://www.twitter.com/sisiwei&quot;&gt;Sisi Wei&lt;/a&gt; and &lt;a href=&quot;http://www.twitter.com/eschow&quot;&gt;Emily Chow&lt;/a&gt;. For the past two years, the project has fallen on my shoulders as the publication’s former interactive editor and current webmaster.&lt;/p&gt;
&lt;p&gt;Last year, I foolishly undertook the development process all by myself. The final result was &lt;a href=&quot;http://www.northbynorthwestern.com/story/the-2012-freshman-housing-guide/&quot;&gt;somewhat embarrassing&lt;/a&gt;, a barely functional mess of a Canvas-based map with a whole bunch of ugly JavaScript to go with it. It was all I could manage as a &lt;em&gt;much&lt;/em&gt; more limited programmer without the access or technical ability to break free of our Django-based CMS.&lt;/p&gt;
&lt;p&gt;This year was going to be different. I learned my lesson. I would get help. I would get people better and smarter than me to develop alongside me, and together, we could develop the app I truly wanted to make.&lt;/p&gt;
&lt;p&gt;First of all, we needed to present the reporting, photography and videography of nearly &lt;em&gt;50 student reporters&lt;/em&gt; in the best light possible. They work too hard for the app itself to let them down. After some discussion, the team decided the best solution was a fully independent Django app. Our potential users, incoming freshmen, would use this application from anywhere in the world with any kind of device, so we needed something responsive. We wanted to provide basic information and accurate data on each hall. However, we knew that our advantage over standard university advertisement had always been the opinions of current residents on each dorm and the deep level of access we had to all of the facilities. Thus, we wanted to emphasize the character of every residence hall in this edition of the guide as well.&lt;/p&gt;
&lt;p&gt;I think we accomplished all of those things. But it wasn’t easy, even with the ridiculous talent on the team. In my first role as a lead on a &lt;em&gt;team&lt;/em&gt; of developers, I learned a lot of lessons. Here are some of them.&lt;/p&gt;
&lt;h2&gt;Set early content deadlines and meet them.&lt;/h2&gt;
&lt;p&gt;One of the best decisions we made early on was to get all content ready weeks in advance. Of course, small changes continued to be made up to the night of publication, but this allowed us to be in a place where we could develop with real data. The inevitably late content still came in at a time that was manageable to integrate in the development process. In a Django environment, we were able to fine-tune our models to our content so that we had nothing extraneous.&lt;/p&gt;
&lt;p&gt;This helped our design process too. We knew exactly what we had to work with, so even our initial mockups were fairly accurate. We could iterate and find the best place for each piece of content we had. In a responsive context, we could orchestrate our content in a way that made sense on every device we tested on. On the dorm detail pages, we could play with many iterations of content choreography. In the end, we chose to put the vital statistics (dorm size, location, amenities) in the left rail for a desktop size, but we forced that content below the multimedia elements on mobile. Before we reached that solution, the vital statistics section existed on just about every other area of the page. Knowing what we had early helped us find the proper placement.&lt;/p&gt;
&lt;p&gt;Of course, meeting our content deadlines was only possible because of the project’s phenomenal editors: &lt;a href=&quot;http://www.twitter.com/denisedslu&quot;&gt;Denise Lu&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/meggophone&quot;&gt;Megan Thielking&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Use spreadsheets because they rule.&lt;/h2&gt;
&lt;p&gt;To populate our database with our content, our editors filled out a spreadsheet with all of the information we needed, including each individual quotation from a student, an embed code for each video and a link to every photo to go in our slideshows. It was a comprehensible way for them to make sure the right content got into the development team’s hands. And for us, it just took a few &lt;a href=&quot;https://github.com/edcrewe/django-csvimport&quot;&gt;django-csvimport&lt;/a&gt; commands to get the database running. The smoothness of this process makes me excited to find a project for something like &lt;a href=&quot;http://tarbell.tribapps.com/readme/&quot;&gt;Tarbell&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Pair programming is awesome. Do it often.&lt;/h2&gt;
&lt;p&gt;Operating on different schedules, we found it hard for all of us to meet in the same place at the same time and hack on the project. This made our code go in many divergent paths before it finally all came back together with about a week until publication. In that last week, I met with just about every member of the team individually for a few hours, and we paired on whatever aspect of the project they were responsible for.&lt;/p&gt;
&lt;p&gt;Perhaps it was the threat of deadlines looming over us, but those pairing sessions were ridiculously productive, and I wish I had started having those sessions earlier in the development process. Having me there as the common element between the sessions helped unify the code and make sure everything that needed to get done was completed. I may not have written every line of code, but I saw most of them get written and approved of them.&lt;/p&gt;
&lt;h2&gt;Ask for data and sometimes, ye shall receive.&lt;/h2&gt;
&lt;p&gt;As a student journalist, I know covering a private university is hard. Private universities have very little responsibility to disclose what they do, and they generally have no reason to tell student journalists (or any journalists) anything more. With the housing guide, we have often been limited as to what information we could provide because, discouraged from so many other stories, we never asked for the data. But this time, Northwestern’s Residential Services cooperated with us in the interest of providing accurate information on all fronts to incoming freshmen.&lt;/p&gt;
&lt;p&gt;Thanks to their data, we could provide accuracy on the number of residents in each hall and what types of rooms are available. We were able to provide clarity on the different types of options available for freshmen. The relationship was mutually beneficial, and as student journalists at private universities, we should look for more relationships like this one where we can practice with data and use it to make something worthwhile.&lt;/p&gt;
&lt;h2&gt;Assign roles based on expertise, but get everyone involved in everything.&lt;/h2&gt;
&lt;p&gt;Dan knows his way around a map. Hilary and Rebecca are fantastic designers. Sheng and Katie have a wealth of full-stack development experience. It was easy for me to assign responsibilities to each member of the team based on his or her expertise, and that general structure ensured things got done.&lt;/p&gt;
&lt;p&gt;But this experience was meant to teach as well as produce. So when Dan was ready to incorporate his map into the design, we showed him the &lt;a href=&quot;http://www.inuitcss.com/&quot;&gt;grid system we used&lt;/a&gt; to make the responsive magic happen. When it was time to get Hilary’s design templated into Django, we did it by showing her how the models and views worked so she could begin writing template tags herself. They all came out of this experience with more knowledge than when they agreed to help out over a month ago, or at least I hope so.&lt;/p&gt;
&lt;h2&gt;Test with force.&lt;/h2&gt;
&lt;p&gt;The first live day for this app was not great, and most of the blame for the problems lay with me. I made a few dumb mistakes in the Django app that caused the entire server, not just the guide, to crash. The dumbest one was this: to make the map, I decided it was a good idea (despite protest from smarter members of the team) to run a Django view through a jQuery AJAX request that turned the GeoDjango Multipolygons into GeoJSON data that Leaflet could parse. This made our Varnish cache useless, forcing a request to the application on every single page view. Naturally, the server crashed four times in two hours.&lt;/p&gt;
&lt;p&gt;Thanks to a massive assist from &lt;a href=&quot;http://www.twitter.com/jeremybowers&quot;&gt;Jeremy Bowers&lt;/a&gt;, I baked out the JSON to static files on S3 and used those to make the AJAX request. I could have avoided this whole problem if I load tested the application with any bit of force. I figured we wouldn’t get enough traffic for the Django requests to matter, but even a few thousand page views crashed our server. I would have known that if I did some load testing before deployment.&lt;/p&gt;
&lt;h2&gt;Have individual humility and group hubris.&lt;/h2&gt;
&lt;p&gt;This is the best project I have ever been a part of, leader or not, and that is because I worked with a team of my most talented friends together to work towards an achievable goal. I didn’t try to do this all by myself. Instead, we had a group-wide hubris that pushed our boundaries as developers and designers. As a team, we shot for a professional-grade news application, and, in my ever-so-biased opinion, we succeeded.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Intelligent Story Modeling</title>
      <link>http://www.tylerjfisher.com/articles/intelligent_story_modeling/</link>
      <pubDate>Fri, 26 Apr 2013 20:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://www.tylerjfisher.com/articles/intelligent_story_modeling/</guid>
      <author></author>
      <description>&lt;h6&gt;Note: This was originally published on &lt;a href=&quot;https://medium.com/rethinking-the-news/4cf61f22f4d4&quot; target=&quot;_blank&quot;&gt;Medium&lt;/a&gt;.&lt;/h6&gt;
&lt;p&gt;For about seven months, I have been developing &lt;a href=&quot;http://www.northbynorthwestern.com/&quot;&gt;my college publication’s&lt;/a&gt; homebrew Django-based CMS (not to be confused with &lt;a href=&quot;http://www.django-cms.org/&quot;&gt;django-cms&lt;/a&gt;). I suppose “maintain” would be the more appropriate word; I didn’t actually build the CMS. Instead, I’ve added a few features, subtracted a few useless ones and optimized for performance. These days, it works well, and my editors know how to use it effectively. But I’m frustrated.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I’m frustrated by the inflexible taxonomy system. I’m frustrated by the disconnect between writing, editing and publication. I’m frustrated by the roundabout way we curate content every day for our readers. That is not a knock against our original CMS architect. He (yes, he, singular) did a great job. I’m frustrated by the limitations inherent in any content management system available today. But most of all, I’m frustrated by the one-size-fits-all story model.&lt;/p&gt;
&lt;p&gt;At North by Northwestern, we publish &lt;a href=&quot;http://www.northbynorthwestern.com/story/ao-spring-comedy-show-cancelled/&quot;&gt;breaking news briefs&lt;/a&gt; and &lt;a href=&quot;http://www.northbynorthwestern.com/story/the-story-behind-Danny-Did/&quot;&gt;longform features&lt;/a&gt;, &lt;a href=&quot;http://www.northbynorthwestern.com/story/busy-busy-busy/&quot;&gt;opinion articles&lt;/a&gt; and &lt;a href=&quot;http://www.northbynorthwestern.com/story/celebration-at-the-confines/&quot;&gt;sports recaps&lt;/a&gt;, &lt;a href=&quot;http://www.northbynorthwestern.com/story/em-man-of-steel-em/&quot;&gt;blogs&lt;/a&gt; and &lt;a href=&quot;http://www.northbynorthwestern.com/story/unexpected-art/&quot;&gt;photo essays&lt;/a&gt;, even &lt;a href=&quot;http://www.northbynorthwestern.com/story/to-the-last-dollar/&quot;&gt;online versions&lt;/a&gt; of writing from our &lt;a href=&quot;http://issuu.com/nbnmag/docs/nbnwinter2013book/3&quot;&gt;quarterly sister magazine&lt;/a&gt;. Yet, to the CMS, they’re all “stories,” and they all look and function the same way. That doesn’t make any sense.&lt;/p&gt;
&lt;p&gt;So the solution is obvious, right? Define some more types of story models. Maybe have a Mag model, a Feature model, a Breaking model, a Media model. But where do I draw the line? And at what point does the CMS become too cumbersome for full-time college students to use effectively on a daily publishing schedule? What if a new format arises, and an old one dies? Do I continuously adapt the entire CMS structure to the whims of the publication?&lt;/p&gt;
&lt;p&gt;Certainly, there is a better way forward beyond defining more story models. Like responsive design allows us to be ready for any device on the front-end, more intelligent story modeling could prepare us for any type of story a publication wants to produce.&lt;/p&gt;
&lt;p&gt;Each story we tell has a different genesis. For example, breaking news comes from something immediate and surprising: a press release, a tweet, a physical act, an event. So shouldn’t the relevant “something” become the center of the story? A short breaking news blurb on the same story page that hosts a 5,000 word feature says, “This story doesn’t matter. We had nothing to say.” A story model that pays a greater attention to the genesis of the story can make that more exciting. Put the event at the center. Show it; don’t tell it. How the front-end design handles that genesis is up to the publication, but our content management systems should be smarter about sourcing material and making that material immediately available to readers.&lt;/p&gt;
&lt;p&gt;I’d like to turn to the evil geniuses at Buzzfeed for a &lt;a href=&quot;http://www.buzzfeed.com/ryanhatesthis/asian-fraternity-causes-uproar-after-wearing-blackface-to-dr&quot;&gt;more specific example&lt;/a&gt; of how this might work. This story describes an Asian fraternity at UC Irvine who dressed in blackface to be like Jay-Z. They shot videos and took many photos of themselves in costume. This is a fairly serious story, especially by Buzzfeed standards, and it is presented with all of the source material referenced right there, in the story. There are a few good things about this.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The reader is engaged with the story.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The reader stays on the page instead of opening YouTube or Facebook in a new tab and getting sucked into that rabbit hole.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The story is more credible. The primary source is available and present.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With no knowledge of Buzzfeed’s custom CMS, I would imagine that their web producers are just really good at embedding YouTube videos and posting images. Their CMS probably makes that pretty easy, too. But what if our story creation started from the source? That’s where it starts in our heads, so let’s make story creation more intuitive. Use a browser extension on a tweet to send it to a story creation page, where not only has the tweet been embedded, but the data surrounding the tweet has also been logged into the CMS. Once the story is published, the CMS can then know how to present the story based on where the story came from. In the example where you start from a tweet, the embedded tweet becomes the major part of the story.&lt;/p&gt;
&lt;p&gt;This is where things get more interesting. Want to provide a model and view of stories found from tweets? Easy, now that you’re automatically logging that data. Want to build a taxonomy system of stories based on the source (not just Twitter, but the Twitter user)? Easy. Now, apply this to sourcing from YouTube, Facebook, or any other URL-based source. Suddenly, you’re pulling in data from every story that sources from something on the Internet, which is to say, a lot of things.&lt;/p&gt;
&lt;p&gt;We’ve only even discussed breaking news as a place to think about smarter modeling. What about tying sports recaps to the data surrounding the story, leveraging the ESPN API (or something comparable)? Now we can say, “show me all of the game recaps between Chicago and Philadelphia.” When your hometown slugger approaches a home run record, building a game-by-game explanation of that season becomes easier because you’ve automatically been logging that data already and tying it to each story you write.&lt;/p&gt;
&lt;p&gt;When you start each individual story by building from an online source, an intelligent CMS can build a view based on the data provided. Suddenly, the context in which a story comes in informs the way it is presented. That data remains available and can easily inform follow-ups and related stories. Really, intelligent story modeling is all about building a smarter editorial process where sources and data are intrinsically involved in story creation.&lt;/p&gt;
&lt;div class=&quot;pullquote&quot;&gt;&lt;em&gt;The information sciences are now sufficiently developed so that we can give some systematic attention to the forms of the messages we prepare and the best ways to compose and send them so that they will be received and understood.&lt;/em&gt;&lt;/div&gt;

&lt;p&gt;Philip Meyer wrote that in 1991(!) for his rewrite of Precision Journalism, but we still haven’t figured out how to systematically approach the format of our storytelling. I don’t have the answers. But I have some ideas, and I hope we can start discussing how to approach intelligent story modeling. As the webmaster of a college publication, I’m in the unique position of controlling every piece of technology the website uses, and I hope to explore intelligent story modeling while I have the ability to implement an idea across the website with no overhead. But I hope I’m not alone in wanting to build a better system for journalism.&lt;/p&gt;
&lt;p&gt;I posted this on Medium under a new collection, “Rethinking the News,” in order to hear some more ideas about how we (hackers, writers, editors, producers, thinkers, designers, optimists, pessimists) can make journalism and journalists better. I’d love to hear your thoughts. Let’s make journalism indispensable again.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>What j-schools can learn from music conservatories</title>
      <link>http://www.tylerjfisher.com/articles/compj/</link>
      <pubDate>Mon, 04 Feb 2013 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://www.tylerjfisher.com/articles/compj/</guid>
      <author></author>
      <description>&lt;h6&gt;Note: This was originally published on the &lt;a href=&quot;http://knightlab.northwestern.edu/2013/02/05/what-j-schools-can-learn-from-music-conservatories-compj/&quot; target=&quot;_blank&quot;&gt;Knight Lab blog&lt;/a&gt;&lt;/h6&gt;
&lt;p&gt;Was Computation + Journalism an academic conference or an industry conference? It&amp;#39;s hard to say, especially when nearly every panel through its two days featured a working journalist and an educator, and an equally diverse audience pressed questions from many ends of the field. Unsurprisingly, the debates that came to the fore early and often centered around that intersection between educators and practicing journalists. As a student in a journalism school, I paid special attention to the discussion around what students should be learning in journalism school to prepare them for becoming a practicing journalist.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;During his presentation, Storytelling with Data Visualization, Alberto Cairo finished his opening statement by asking, “Should all journalists learn to code?” While he didn‘t answer the question explicitly, I answer yes — with a caveat. Do all journalists need to learn how to create and maintain a dynamic, data-driven application on their own self-hosted server? Probably not. Do all journalists need to know how to get their content on the web and present it effectively? Absolutely. HTML and CSS skills are essential to succeeding at any publication with a web product – that is, any publication with a pulse. But many programmers will say “HTML is not coding; it’s markup.” True. Which is why we need to go further and teach the &lt;em&gt;fundamentals&lt;/em&gt; of programming. It matters not if you teach Python or JavaScript or R, (indeed, students could choose based on their interests) because those tools will almost certainly go away within any young journalist‘s lifetime. What’s more important, and Cairo agreed later in the panel, is the notion of &lt;em&gt;computational literacy.&lt;/em&gt; Journalists need to know how to use the tools in front of them to make their stories better. They need to know what is possible and what is not. Even if they do not explore programming at a deeper level, they need to know how to work with developers in their newsrooms.&lt;/p&gt;
&lt;p&gt;At many different levels and throughout many panels, Computation + Journalism dealt with how to integrate computational literacy into our journalism schools. Philip Meyer opened the conference by stating that journalism is in a “state of chaos.” Something new is going to come out of the chaos, and we have to build it. Why not start at the journalism school level? Meyer wondered if journalism schools couldn&amp;#39;t take more of a role in defining what journalism &lt;em&gt;is&lt;/em&gt;. If journalism is going to have a successful future, computational literacy has to be a part of the equation (in addition to storytelling, critical thinking, and other more traditional journalistic skills), and it has to come at the educational level.&lt;/p&gt;
&lt;p&gt;Related to computational literacy is the notion that journalists must pivot from tool users to tool makers. Meyer, Jer Thorp, Nicholas Lemann, and others harped on this point throughout the two days. The tool makers in our field — Mike Bostock, Jeremy Ashenkas, and anyone who has ever open-sourced a project — have been indispensable, but we must not forget how to use the tools of others for our own bidding. The apps we create are built on the shoulders of the best open-source technology, and it takes a skilled user — indeed, a computationally literate user — to know how to piece everything together. Smart usage is an important component of learning how to work in web journalism.&lt;/p&gt;
&lt;p&gt;So what model can journalism schools create to properly educate its students in a world of computational journalism? The model may already exist. I spent a year studying music while at Northwestern, and I find that the new needs of a journalism school parallel that of a traditional music school or conservatory. At a typical music school, you will have (at least) three interdependent fields of study: performance, composition, and education. Performers majors require a special level of craft on their chosen instrument, perfecting tone quality, technical dexterity, musicality, and all the other facets that make a great performing musician. Composers learn how to create music that performers play, yet what makes classical music so interesting is the way different performers interpret compositions. Educators bridge the gap between performers and composers. In a way, they are performers themselves as conductors, but more importantly, they learn skills that help them reherase a group of performers and teach them how to correctly interpret the composer&amp;#39;s music within the context of the performing ensemble.&lt;/p&gt;
&lt;p&gt;The analogues to journalism are easy to draw in the context of the tool using vs. tool making debate. Performers are our writers, reporters, photographers and videographers. They fall here because they are the tool users. Though certainly they carry elements of composers through their creative process, this is the same as how musicians “make music.” In this model, they &lt;em&gt;perform&lt;/em&gt; journalism rather than create it through an already composed set of journalistic tools. The composers are our tool makers, our developers that create the applications and libraries that modern journalism is founded upon. In the journalism world, the educators are our editors and project managers. They organize the groups of performers and define the voice of the publication. They choose the tools with which journalism will be performed. Like the conductor connects the performer to the composer and the individual to the ensemble, they connect the reporter to the developer and the story to the publication.&lt;/p&gt;
&lt;p&gt;Certainly, this is not a perfect model, and I am not advocating for “Journalism Performance” majors. But the model helps divide the different needs this new world of computational journalism needs. We need both skilled users and creators as well as strong leaders to help keep us all together and lead our publications. The debates raised at Computation + Journalism have already begun to define this divide in skill set. Are we all to be programmers and tool makers, or simply understanding of the Internet&amp;#39;s capabilities and able to perform them? Certainly, we must all understand how computational journalism affects our craft. But the path to the composer will not interest every journalist, and it should not be for every journalist. Instead, just as every music student learns introductory music theory, but only some become composers, every journalist should learn introductory programming, and only some will become developers.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Easy Writing, or, How I Learned to Stop Worrying and Love Markdown</title>
      <link>http://www.tylerjfisher.com/articles/what_is_markdown/</link>
      <pubDate>Thu, 01 Nov 2012 12:50:00 -0400</pubDate>
      <guid isPermaLink="true">http://www.tylerjfisher.com/articles/what_is_markdown/</guid>
      <author></author>
      <description>&lt;p&gt;About six months ago, I started using &lt;a href=&quot;http://daringfireball.net/projects/markdown&quot;&gt;Markdown&lt;/a&gt; to take notes in class, to write essays, to keep track of meetings, to make project to-do lists — for just about everything. Markdown is the reason I chose to use &lt;a href=&quot;http://scriptogr.am/&quot;&gt;Scriptogr.am&lt;/a&gt; for this blog. People who see my screen in a class often ask what I‘m doing, and I’ve been recognized elsewhere as “the kid who codes his notes.” It&amp;#39;s really not that scary. I think Markdown is for everyone. So this is an explainer on how I switched my written life to Markdown, and an argument for why more people, especially journalists, should do so.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;What is Markdown, and why should I care?&lt;/h2&gt;
&lt;p&gt;Markdown was created by &lt;a href=&quot;http://daringfireball.net/&quot;&gt;John Gruber&lt;/a&gt; and &lt;a href=&quot;http://www.aaronsw.com/&quot;&gt;Aaron Swartz&lt;/a&gt; in 2004, and this is how they describe Markdown:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Markdown is a text-to-HTML conversion tool for web writers. Markdown allows you to write using an easy-to-read, easy-to-write plain text format, then convert it to structurally valid XHTML (or HTML).&lt;/p&gt;
&lt;p&gt;Thus, “Markdown” is two things: (1) a plain text formatting syntax; and (2) a software tool, written in Perl, that converts the plain text formatting to HTML.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;All that jargon boils down to is this: Markdown is an easier way of writing basic HTML, making things like inserting images and links super simple. It makes writing on the web as easy as (easier than!) writing in Microsoft Word.&lt;/p&gt;
&lt;p&gt;More importantly, Markdown is a plain text formatting syntax. All that means is that it gives you simple ways to tell your text what to look like. Even if you never, ever touch HTML, Markdown is extremely useful. Want a title? Instead of fumbling around in Word or Pages for your font size selector, just put a # in front of the words you want as your title, like I did for the title of this section:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#What Is Markdown?&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Want to make a bulleted list for taking notes? Once again, all it takes is typing a character (an asterisk or a dash, your choice) before your bullet point instead of finding the “insert bullet point list here” button in your word processor[^1].&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* This is my first item in my list
* This is my second item in my list
    * I can even indent with ease
* And I can come back out to the top level with ease&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When it comes to note-taking, I hardly use any other features of Markdown. Indeed, there aren&amp;#39;t many more features to choose from. &lt;a href=&quot;http://support.mashery.com/docs/customizing_your_portal/Markdown_Cheat_Sheet&quot;&gt;Here&lt;/a&gt; is a nice cheat sheet of Markdown syntax to get you started.&lt;/p&gt;
&lt;h2&gt;Picking your editor&lt;/h2&gt;
&lt;p&gt;To use Markdown, you need a plain text editor, and there are quite a few options out there, especially if you are a Mac user. In the end, this is really the only tool you need to start using Markdown. You could use a fully-featured, programmer&amp;#39;s text editor like Sublime Text (my favorite, with plenty of Markdown-centric plugins), Vim, or Textmate, but I highly recommend getting an editor that focuses on Markdown specifically.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;My choice&lt;/strong&gt;: &lt;strong&gt;&lt;a href=&quot;http://mouapp.com/&quot;&gt;Mou&lt;/a&gt;&lt;/strong&gt; (Mac-only, free)&lt;/p&gt;
&lt;p&gt;I prefer Mou because of its live preview option and true dedication to Markdown. Its actual typing interface works much like your average plain text editor that a programmer would use. It supports syntax highlighting, has autocompletion,  emphasizes monospace fonts, and has various color schemes. Unlike a regular text editor, however, this is all centered around Markdown syntax. The homepage for the app gives a pretty good rundown of the app&amp;#39;s available features. It exists in a free public beta for now.&lt;/p&gt;
&lt;p&gt;With Mou, you probably don&amp;#39;t need any other application to handle your Markdown life. You can write and view your finished work in the same window, export to a PDF file for easy printing and sharing, and even post to Tumblr from within the app.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Other choices:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://bywordapp.com/&quot;&gt;&lt;strong&gt;Byword&lt;/strong&gt;&lt;/a&gt; (Mac, iPad, iPhone, $10)&lt;/p&gt;
&lt;p&gt; A lot of people love Byword. It presents a very minimalist layout for smooth writing, and presents your text beautifully. Its syntax highlighting is much more subtle, and it also has a preview option, though it&amp;#39;s not as fully-featured. I like Byword when I  need to write with no distractions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://iawriter.com/&quot;&gt;&lt;strong&gt;iA Writer&lt;/strong&gt;&lt;/a&gt; (Mac, iPad, iPhone, $5)&lt;/p&gt;
&lt;p&gt; iA Writer is much like Byword, except that it gives you one nice theme and one font/font-size to work with. It is very opinionated in how it wants you to write. Its truly innovative feature is its “focus mode”, allowing you to grey out everything but the sentence you are working on. Byword and other apps have adopted this feature, but iA Writer started it and does it best. It also syncs via iCloud or Dropbox to your iOS devices if you have their iOS app.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://markdownpad.com/&quot;&gt;MarkdownPad&lt;/a&gt;&lt;/strong&gt; (Windows, free)&lt;/p&gt;
&lt;p&gt; I don‘t know. I don’t use Windows. Looks like Mou for Windows though.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://writemonkey.com/index.php&quot;&gt;WriteMonkey&lt;/a&gt;&lt;/strong&gt; (Windows, free)&lt;/p&gt;
&lt;p&gt; Again, not a Windows user, but this one actually looks fairly interesting, if slightly complicated. I might try it out some time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.tylerjfisher.com/articles/what_is_markdown/&quot;&gt;&lt;strong&gt;UberWriter&lt;/strong&gt;&lt;/a&gt; (Linux, free)&lt;/p&gt;
&lt;p&gt; If you use Linux, this one looks good. Also, if you use Linux, you probably already have a text editor of choice.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://dillinger.io/&quot;&gt;dillinger.io&lt;/a&gt;&lt;/strong&gt; (Web, free)&lt;/p&gt;
&lt;p&gt; Don&amp;#39;t like to write in a dedicated application, and would like something web-based like Google Docs? Dillinger.io works with Dropbox and is a great web-based Markdown editor&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;So I have an editor and I understand the Markdown syntax. Now what?&lt;/h2&gt;
&lt;p&gt;Go nuts!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Take notes with your Markdown editor&lt;/strong&gt; in class or in a meeting. You might stumble over the syntax the first time, but trust me: Markdown is so simple that typing headers and lists and definitions become second-nature soon enough. Once you feel comfortable, try going back to your word processor. Notice how much longer it takes you to do &lt;em&gt;everything&lt;/em&gt;. Let Markdown handle your formatting so you can go back to learning and paying attention. Even better, &lt;strong&gt;write your essays in Markdown.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Do you have a blog or write for a website? Good news! You can &lt;strong&gt;write your posts in Markdown&lt;/strong&gt;! This is what Markdown is actually for! Tumblr natively supports Markdown[^2], and WordPress just needs a &lt;a href=&quot;http://wordpress.org/extend/plugins/wp-markdown/&quot;&gt;simple plugin&lt;/a&gt;. If your blog or website does not support Markdown, just use your Markdown editor‘s ability to export to HTML and copy the raw HTML into your website’s post editor. Since Markdown handles writing valid HTML, you no longer have to play around with making sure your &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tags close or your images and links are marked up correctly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Make todo lists in Markdown&lt;/strong&gt;. There is a Mou theme called &lt;a href=&quot;http://mrfrisby.com/topmarks/index.html&quot;&gt;TopMarks&lt;/a&gt; that makes this user-friendly (you also need &lt;a href=&quot;http://www.tylerjfisher.com/articles/what_is_markdown/&quot;&gt;TextExpander&lt;/a&gt;). &lt;a href=&quot;http://www.foldingtext.com/&quot;&gt;FoldingText&lt;/a&gt; is a new (and sadly expensive) app focused on list-making in Markdown. It even has timers so you can keep track of your Facebook breaks. But all that is unnecessary. Just keep a simple Markdown file with a bullet-point list of tasks to do. It&amp;#39;s way easier to maintain than a whole separate note-taking app.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Make your entire blog with Markdown.&lt;/strong&gt; That‘s what I’ve done with &lt;a href=&quot;http://scriptogr.am/&quot;&gt;Scriptogr.am&lt;/a&gt;. It syncs to your Dropbox account, and all you have to do to get your blog running is write your Markdown posts in Mou and use the built-in publish to Scriptogr.am feature. Blogging has never been easier.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Explore the growing world of Markdown apps and users.&lt;/strong&gt; Despite its creation in 2004, Markdown has only really become widely used in the past year or two. &lt;a href=&quot;http://fletcherpenney.net/multimarkdown/&quot;&gt;Marked&lt;/a&gt; is a great tool for previewing and interacting with your Markdown documents in a more readable format. I use its built-in themes to print Markdown documents if I need to. &lt;a href=&quot;http://onethingwell.org/tagged/markdown&quot;&gt;One Thing Well&lt;/a&gt; and &lt;a href=&quot;https://pinboard.in/t:markdown/&quot;&gt;Pinboard&lt;/a&gt; are great resources to see what people are making with Markdown.&lt;/p&gt;
&lt;h2&gt;What&amp;#39;s the catch?&lt;/h2&gt;
&lt;p&gt;Markdown isn‘t perfect. If you’re actually using it to compile valid HTML, it becomes more and more outdated as multimedia becomes more and more of a reality in our everyday web consumption. Markdown works great for text-only posts, or even text posts with a few images. But you cannot float those images, and you cannot embed any other kind of media. Sidebars? Forget about it. Now, Markdown is not meant to compose an entire website, and it never should be, but to help web writers, it should get some more features (&lt;a href=&quot;http://fletcherpenney.net/multimarkdown/&quot;&gt;MultiMarkdown&lt;/a&gt; is a great start). I have a whole range of opinions on where Markdown should go next, and it will be the subject of my next post.&lt;/p&gt;
&lt;p&gt;[^1]: Even better, most Markdown editors will recognize you are making a list and insert the asterisk or dash for you after you make the first item.&lt;/p&gt;
&lt;p&gt;[^2]: To enable it, just go into your &lt;a href=&quot;https://www.tumblr.com/settings&quot;&gt;account settings&lt;/a&gt; and change “Edit posts using” to Markdown.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Failing, Flailing</title>
      <link>http://www.tylerjfisher.com/articles/failing_flailing/</link>
      <pubDate>Mon, 29 Oct 2012 02:31:00 -0400</pubDate>
      <guid isPermaLink="true">http://www.tylerjfisher.com/articles/failing_flailing/</guid>
      <author></author>
      <description>&lt;p&gt;I have had an anger problem for my entire life. In preschool, I was almost held back for a third year because I couldn&amp;#39;t control my temper whenever I lost a game or experienced any setback at all[1]. More generally, I hated failure. I still do.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;So naturally, I&amp;#39;ve become a programmer, where you can expect to fail dozens of times before you find the right solution to your problem, and even when you do find a solution, you can always find a &lt;em&gt;better&lt;/em&gt; solution. I‘m pretty good at controlling my temper these days in public these days; in a newsroom or in a workplace, I might curse under my breath, but I’ll keep to myself as I work. Programming alone in my room is another story. I scream at my screen, punch pillows, pace around furiously, and generally flail around until I find a solution, especially when others are depending on my success.&lt;/p&gt;
&lt;p&gt;Nothing has been more demanding on my ability to handle failure than working on &lt;a href=&quot;http://www.northbynorthwestern/&quot;&gt;North by Northwestern&lt;/a&gt;, where I serve as webmaster. I&amp;#39;m responsible for everything regarding the frontend and backend of the site. If anything at all goes wrong, from an overflowing Twitter widget to extremely slow database queries, I hear about it and have to fix it promptly. Unfortunately, I took the position at a time when I was hardly qualified. I knew next to nothing about database management, and I had just begun working with Django, our web framework of choice. In the first two months of my tenure, I have already learned a ton. Eventually, everything always works out and I fix the problem, but it takes me a while to find a solution that may not be obviously apparent to me because &lt;strong&gt;I have no idea what I&amp;#39;m doing.&lt;/strong&gt; That problem is two-fold:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We publish daily. Time is scarce. I need to find a solution, but first, I need to find the &lt;em&gt;problem&lt;/em&gt;. As the wise sage Heather Billings &lt;a href=&quot;https://twitter.com/hbillings/status/256775781517258753&quot;&gt;once said&lt;/a&gt;, “Programming is easy once you know what problem you actually need to solve.”&lt;/li&gt;
&lt;li&gt;When I don&amp;#39;t know what to do, I fail a lot, and I am dealing with sensitive data: six years of publishing history[2]. For me, the tension of executing any sort of process is unbearably stressful because of the consequences should something go wrong.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Generally, I work on NBN when I have free time by myself. The stress of failing when dealing with a live site used by some of my closest friends and viewed by thousands of students is, at times, brutal. But in the end, all that stress is self-inflicted. It stems from an expectation of myself to be perfect all the time. No one has gotten angry with me about my performance (or at least they haven‘t told me about it). My perfectionism, especially in the field I’ve chosen for myself, is unhealthy.&lt;/p&gt;
&lt;p&gt;Now that I‘ve familiarized myself with what I need to know regarding our Django app so that I can attack a problem swiftly, I have a new goal: I want to stabilize myself. I want to receive the email or phone call with a sense of calm and, instead of wasting energy and time on freaking out, go after the problem and accept that my first attempt at fixing it probably won’t work. I need to tell myself that everything will be okay. I have smart friends that can help me[3]. In the end, I always come out with some sort of solution, either a temporary amalgam of digital duct tape and glue or, eventually, a real, finished solution. I can do this.&lt;/p&gt;
&lt;p&gt;[1]: My mother overruled because I knew how to read. Thanks, Mom.
[2]: I know, I know. Backup, backup, test, backup. I do. But still.
[3]: My smartest friends are called “Google” and “Twitter.”&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>